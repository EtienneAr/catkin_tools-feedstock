diff --git a/common.py b/common.py
index b04b04ef..7d0cac73 100644
--- a/common.py
+++ b/common.py
@@ -30,7 +30,10 @@
     _cmd_split(u'\u00E9')
 
     def cmd_split(s):
-        return _cmd_split(s.decode('utf-8'))
+        if sys.version_info.major == 3:
+            return _cmd_split(str(s, 'utf-8'))
+        else:
+            return _cmd_split(s.decode('utf-8'))
 except UnicodeEncodeError:
     cmd_split = _cmd_split
 
@@ -66,7 +69,7 @@
 
     @asyncio.coroutine
     def acquire(self):
-        raise asyncio.Return(True)
+        return(True)
 
     def release(self):
         pass
diff --git a/execution/controllers.py b/execution/controllers.py
index 4d6ed2ba..4b35cb53 100644
--- a/execution/controllers.py
+++ b/execution/controllers.py
@@ -20,6 +20,7 @@
     from Queue import Empty
 
 import math
+import itertools
 import sys
 import threading
 import time
@@ -284,7 +285,7 @@
         ])
 
         # Calculate the number of columns
-        number_of_columns = (terminal_width() / max_column_len) or 1
+        number_of_columns = int((terminal_width() / max_column_len) or 1)
 
         # Construct different categories of jobs (jid -> output template)
         successfuls = {}
@@ -319,7 +320,7 @@
             wide_log(clr("[{}] Successful {}:").format(self.label, self.jobs_label))
             wide_log("")
             print_items_in_columns(
-                sorted(successfuls.items() + ignoreds.items()),
+                sorted(itertools.chain(successfuls.items(), ignoreds.items())),
                 number_of_columns)
         else:
             wide_log("")
diff --git a/execution/executor.py b/execution/executor.py
index db047734..b3ad2a86 100644
--- a/execution/executor.py
+++ b/execution/executor.py
@@ -73,7 +73,7 @@
         # Check for stage synchronization lock
         if stage.locked_resource is not None:
             lock = locks.setdefault(stage.locked_resource, asyncio.Lock())
-            yield asyncio.From(lock)
+            yield from(lock)
         else:
             lock = FakeLock()
 
@@ -82,7 +82,7 @@
             if stage.occupy_job:
                 if not occupying_job:
                     while job_server.try_acquire() is None:
-                        yield asyncio.From(asyncio.sleep(0.05))
+                        yield from(asyncio.sleep(0.05))
                     occupying_job = True
             else:
                 if occupying_job:
@@ -106,7 +106,7 @@
                             # Get the logger
                             protocol_type = stage.logger_factory(verb, job.jid, stage.label, event_queue, log_path)
                             # Start asynchroonous execution
-                            transport, logger = yield asyncio.From(
+                            transport, logger = yield from(
                                 async_execute_process(
                                     protocol_type,
                                     **stage.async_execute_process_kwargs))
@@ -115,7 +115,7 @@
                             if 'Text file busy' in str(exc):
                                 # This is a transient error, try again shortly
                                 # TODO: report the file causing the problem (exc.filename)
-                                yield asyncio.From(asyncio.sleep(0.01))
+                                yield from(asyncio.sleep(0.01))
                                 continue
                             raise
 
@@ -128,7 +128,7 @@
                         **stage.async_execute_process_kwargs))
 
                     # Asynchronously yield until this command is completed
-                    retcode = yield asyncio.From(logger.complete)
+                    retcode = yield from(logger.complete)
                 except:  # noqa: E722
                     # Bare except is permissable here because the set of errors which the CommandState might raise
                     # is unbounded. We capture the traceback here and save it to the build's log files.
@@ -140,7 +140,7 @@
                 logger = IOBufferLogger(verb, job.jid, stage.label, event_queue, log_path)
                 try:
                     # Asynchronously yield until this function is completed
-                    retcode = yield asyncio.From(get_loop().run_in_executor(
+                    retcode = yield from(get_loop().run_in_executor(
                         threadpool,
                         stage.function,
                         logger,
@@ -182,7 +182,7 @@
             lock.release()
 
     # Finally, return whether all stages of the job completed
-    raise asyncio.Return(job.jid, all_stages_succeeded)
+    return(job.jid, all_stages_succeeded)
 
 
 @asyncio.coroutine
@@ -275,14 +275,14 @@
         ))
 
         # Process jobs as they complete asynchronously
-        done_job_fs, active_job_fs = yield asyncio.From(asyncio.wait(
+        done_job_fs, active_job_fs = yield from(asyncio.wait(
             active_job_fs,
             timeout=0.10,
             return_when=FIRST_COMPLETED))
 
         for done_job_f in done_job_fs:
             # Capture a result once the job has finished
-            job_id, succeeded = yield asyncio.From(done_job_f)
+            job_id, succeeded = yield from(done_job_f)
 
             # Release a jobserver token now that this job has succeeded
             job_server.release(job_id)
@@ -365,7 +365,7 @@
         completed=completed_jobs
     ))
 
-    raise asyncio.Return(all(completed_jobs.values()))
+    return(all(completed_jobs.values()))
 
 
 def run_until_complete(coroutine):
